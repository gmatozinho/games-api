AWSTemplateFormatVersion: 2010-09-09
Description: >-
  to-beat


Transform:
- AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 60

Parameters:
  # env:
  #   Description: Env
  #   Type: "AWS::SSM::Parameter::Value<String>"
  #   Default: /config/global/env
  DBUsername:
    Description: Username for MySQL database access. Default - username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: teste

Resources:
  #This is a Secret resource with a randomly generated password in its SecretString JSON.
  MyRDSAuroraSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "This is a Secrets Manager secret for an Aurora cluster"
      GenerateSecretString:
        # SecretStringTemplate: '{"username": "admin"}'
        SecretStringTemplate: !Sub 
        - '{"username": "${Username}"}'
        - { Username: !Ref DBUsername }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: "\"@'/\\"

  # This is a Aurora cluster resource. The master username and password use dynamic references
  # to resolve values from Secrets Manager. The dynamic reference guarantees that CloudFormation
  # will not log or persist the resolved value. We use a Ref to the secret resource's logical id
  # to construct the dynamic reference, since the secret name is generated by CloudFormation.
  RDSAuroraCluster:  
    Type: "AWS::RDS::DBCluster"
    Properties:
      DatabaseName: Games
      DBClusterIdentifier: my-serverless-cluster
      Engine:  aurora-postgresql
      EngineMode: serverless
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        MaxCapacity: 2
        SecondsUntilAutoPause: 300
      EnableHttpEndpoint: true      
      MasterUsername: !Sub '{{resolve:secretsmanager:${MyRDSAuroraSecret}::username}}' 
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${MyRDSAuroraSecret}::password}}'

  # This is a SecretTargetAttachment resource which updates the referenced Secret resource with properties about
  # the referenced Aurora cluster
  SecretAuroraAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref MyRDSAuroraSecret
      TargetId: !Ref RDSAuroraCluster
      TargetType: AWS::RDS::DBCluster
    

#   ApiGatewayApi:
#     Type: AWS::Serverless::Api
#     Properties:
#       StageName: !Ref env
#       Cors: "'*'"
#       TracingEnabled: true
#       Auth:
#         ApiKeyRequired: true # sets for all methods

  GetAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          REGION: !Ref "AWS::Region"
          SECRET_ARN: !Ref MyRDSAuroraSecret
          CLUSTER_ARN: !Ref RDSAuroraCluster
          DB_NAME: !Sub '{{resolve:secretsmanager:${MyRDSAuroraSecret}::dbname}}'
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: GET
            Auth:
              ApiKeyRequired: true

#   # This is a Lambda function config associated with the source code: get-by-id.js
#   GetByIdFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       Handler: src/handlers/get-by-id.getByIdHandler
#       Runtime: nodejs12.x
#       MemorySize: 128
#         Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
#       Role: !GetAtt LambdaExecutionRole.Arn
#       Environment:
#         Variables:
#           # Make table name accessible as environment variable from function code during execution
#           SAMPLE_TABLE: !Ref SampleTable
#       Events:
#         Api:
#           Type: Api
#           Properties:
#             RestApiId: !Ref ApiGatewayApi
#             Path: /{id}
#             Method: GET
#             Auth:
#               ApiKeyRequired: true

  # This is a Lambda function config associated with the source code: put-item.js
  PutItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs12.x
      MemorySize: 128
        Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          REGION: !Ref "AWS::Region"
          SECRET_ARN: !Ref MyRDSAuroraSecret
          CLUSTER_ARN: !Ref RDSAuroraCluster
          DB_NAME: !Sub '{{resolve:secretsmanager:${MyRDSAuroraSecret}::dbname}}'
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: POST
            Auth:
              ApiKeyRequired: true

#   # This is a Lambda function config associated with the source code: update-item.js
#   UpdateItemFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       Handler: src/handlers/update-item.updateItemHandler
#       Runtime: nodejs12.x
#       MemorySize: 128
#         Description: A simple example includes a HTTP update method to update one item to a DynamoDB table.
#       Role: !GetAtt LambdaExecutionRole.Arn
#       Environment:
#         Variables:
#           # Make table name accessible as environment variable from function code during execution
#           SAMPLE_TABLE: !Ref SampleTable
#       Events:
#         Api:
#           Type: Api
#           Properties:
#             RestApiId: !Ref ApiGatewayApi
#             Path: /{id}
#             Method: PATCH
#             Auth:
#               ApiKeyRequired: true

#   # This is a Lambda function config associated with the source code: delete-item.js
#   DeleteItemFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       Handler: src/handlers/delete-item.deleteItemHandler
#       Runtime: nodejs12.x
#       MemorySize: 128
#         Description: A simple example includes a HTTP post method to delete one item to a DynamoDB table.
#       Role: !GetAtt LambdaExecutionRole.Arn
#       Environment:
#         Variables:
#           # Make table name accessible as environment variable from function code during execution
#           SAMPLE_TABLE: !Ref SampleTable
#       Events:
#         Api:
#           Type: Api
#           Properties:
#             RestApiId: !Ref ApiGatewayApi
#             Path: /{id}
#             Method: DELETE
#             Auth:
#               ApiKeyRequired: true

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"

# Outputs:
#   WebEndpoint:
#     Description: "API Gateway endpoint URL for Prod ${env} stage"
#     Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${env}/"
