AWSTemplateFormatVersion: 2010-09-09
Description: >-
  to-beat

Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 180

Parameters:
  env:
    Description: Env
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /config/global/env
  DBUsername:
    Description: Username for MySQL database access. Default - username
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: teste

Resources:
  #This is a Secret resource with a randomly generated password in its SecretString JSON.
  MyRDSAuroraSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "This is a Secrets Manager secret for an Aurora cluster"
      GenerateSecretString:
        # SecretStringTemplate: '{"username": "admin"}'
        SecretStringTemplate: !Sub
          - '{"username": "${Username}"}'
          - { Username: !Ref DBUsername }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: "\"@'/\\"

  # This is a Aurora cluster resource. The master username and password use dynamic references
  # to resolve values from Secrets Manager. The dynamic reference guarantees that CloudFormation
  # will not log or persist the resolved value. We use a Ref to the secret resource's logical id
  # to construct the dynamic reference, since the secret name is generated by CloudFormation.
  RDSAuroraCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      DatabaseName: Games
      DBClusterIdentifier: my-serverless-cluster
      Engine: aurora-postgresql
      EngineMode: serverless
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        MaxCapacity: 2
        SecondsUntilAutoPause: 300
      EnableHttpEndpoint: true
      MasterUsername: !Sub "{{resolve:secretsmanager:${MyRDSAuroraSecret}::username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${MyRDSAuroraSecret}::password}}"

  # This is a SecretTargetAttachment resource which updates the referenced Secret resource with properties about
  # the referenced Aurora cluster
  SecretAuroraAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref MyRDSAuroraSecret
      TargetId: !Ref RDSAuroraCluster
      TargetType: AWS::RDS::DBCluster

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref env
      Cors: "'*'"
      TracingEnabled: true
      Auth:
        ApiKeyRequired: true # sets for all methods
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName:
            !Join ["", [{ "Ref": "AWS::StackName" }, "-usage-plan"]]
          Description: !Join [" ", [{ "Ref": "AWS::StackName" }, "usage plan"]]
          Quota:
            Limit: 2000
            Period: MONTH
          Throttle:
            BurstLimit: 10
            RateLimit: 10

  GetAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAllItems
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Description: A simple example includes a HTTP get method to get all items from a table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          ENV: !Ref env
          REGION: !Ref "AWS::Region"
          SECRET_ARN: !Ref MyRDSAuroraSecret
          CLUSTER_ARN: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${RDSAuroraCluster}"
          DB_NAME: !Sub "{{resolve:secretsmanager:${MyRDSAuroraSecret}::dbname}}"
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: GET
            Auth:
              ApiKeyRequired: true
    DependsOn: SecretAuroraAttachment

  # This is a Lambda function config associated with the source code: get-by-id.js
  GetItemByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetItemById
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Description: A simple example includes a HTTP get method to get one item by id from a table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          ENV: !Ref env
          REGION: !Ref "AWS::Region"
          SECRET_ARN: !Ref MyRDSAuroraSecret
          CLUSTER_ARN: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${RDSAuroraCluster}"
          DB_NAME: !Sub "{{resolve:secretsmanager:${MyRDSAuroraSecret}::dbname}}"
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{id}
            Method: GET
            Auth:
              ApiKeyRequired: true
    DependsOn: SecretAuroraAttachment

  # This is a Lambda function config associated with the source code: put-item.js
  CreateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateItem
      Handler: src/handlers/create-item.createItemHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Description: A simple example includes a HTTP post method to add one item to a table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          ENV: !Ref env
          REGION: !Ref "AWS::Region"
          SECRET_ARN: !Ref MyRDSAuroraSecret
          CLUSTER_ARN: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${RDSAuroraCluster}"
          DB_NAME: !Sub "{{resolve:secretsmanager:${MyRDSAuroraSecret}::dbname}}"
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: POST
            Auth:
              ApiKeyRequired: true
    DependsOn: SecretAuroraAttachment

  # This is a Lambda function config associated with the source code: update-item.js
  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateItem
      Handler: src/handlers/update-item.updateItemHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Description: A simple example includes a HTTP update method to update one item to a table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          ENV: !Ref env
          REGION: !Ref "AWS::Region"
          SECRET_ARN: !Ref MyRDSAuroraSecret
          CLUSTER_ARN: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${RDSAuroraCluster}"
          DB_NAME: !Sub "{{resolve:secretsmanager:${MyRDSAuroraSecret}::dbname}}"
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{id}
            Method: PATCH
            Auth:
              ApiKeyRequired: true
    DependsOn: SecretAuroraAttachment

  # This is a Lambda function config associated with the source code: delete-item.js
  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteItem
      Handler: src/handlers/delete-item.deleteItemHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Description: A simple example includes a HTTP post method to delete one item to a table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          ENV: !Ref env
          REGION: !Ref "AWS::Region"
          SECRET_ARN: !Ref MyRDSAuroraSecret
          CLUSTER_ARN: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${RDSAuroraCluster}"
          DB_NAME: !Sub "{{resolve:secretsmanager:${MyRDSAuroraSecret}::dbname}}"
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{id}
            Method: DELETE
            Auth:
              ApiKeyRequired: true
    DependsOn: SecretAuroraAttachment

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"
              - Sid: SecretsManagerDbCredentialsAccess
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref MyRDSAuroraSecret
              - Sid: RDSDataServiceAccess
                Effect: Allow
                Action:
                  - rds-data:BatchExecuteStatement
                  - rds-data:BeginTransaction
                  - rds-data:CommitTransaction
                  - rds-data:ExecuteStatement
                  - rds-data:RollbackTransaction
                Resource: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${RDSAuroraCluster}"

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod ${env} stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${env}/"
