AWSTemplateFormatVersion: 2010-09-09
Description: >-
  to-beat


Transform:
- AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 60

Parameters:
  slackToken:
    Description: Env
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /config/global/slack-token
  channelId:
    Description: Env
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /config/global/channel-id
  env:
    Description: Env
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /config/global/env

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref env
      Cors: "'*'"
      Auth:
        ApiKeyRequired: true # sets for all methods

  GetAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: GET
            Auth:
              ApiKeyRequired: true

  # This is a Lambda function config associated with the source code: get-by-id.js
  GetByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{id}
            Method: GET
            Auth:
              ApiKeyRequired: true

  # This is a Lambda function config associated with the source code: put-item.js
  PutItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: POST
            Auth:
              ApiKeyRequired: true

  # This is a Lambda function config associated with the source code: update-item.js
  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update-item.updateItemHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP update method to update one item to a DynamoDB table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{id}
            Method: PATCH
            Auth:
              ApiKeyRequired: true

  # This is a Lambda function config associated with the source code: delete-item.js
  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-item.deleteItemHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to delete one item to a DynamoDB table.
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{id}
            Method: DELETE
            Auth:
              ApiKeyRequired: true

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod ${env} stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${env}/"
